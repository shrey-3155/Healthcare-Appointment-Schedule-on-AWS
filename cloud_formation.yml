AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation for Healtcare Appointment Scheduling App

Parameters:
  # Prefix for resource names
  Prefix:
    Type: String
    Default: healthcare-appointment

  # Name of Lambda function for inserting into DynamoDB
  emailSender:
    Type: String
    Default: email-sender

  # Name of S3 bucket
  BucketName:
    Type: String
    Default: 'healtcareappointmentschedule'

  # Name of API Gateway
  ApiName:
    Type: String
    Default: healthcare-schedule-api
  
  # Name of environment
  EnvironmentName:
    Type: String
    Default: prod
  
  # Name of DynamoDB table
  DynamoDBTableName:
    Type: String
    Default: 'healthcare-patient'

  # EC2 instance type
  InstanceType:
    Description: Select instance type
    Type: String
    Default: t2.medium
    AllowedValues:
        - t2.small
        - t2.micro
        - t2.medium
        - m1.large
        - m1.small

  #Name of existing Key Pair for EC2
  KeyName:
    Default: healthcarekeypair
    Description: Existing Key Pair for EC2 to enable SSH access.
    Type: AWS::EC2::KeyPair::KeyName
  
  # Link to GitHub repository
  GitHubLink:
    Default: "https://github.com/shrey-3155/Healthcare-Appointment-Schedule-on-AWS.git"
    Type: String

  # VPC Name
  VPCName:
    Type: String
    Default: HealthCareVPC
    Description: Name of the VPC


Resources:

    # Cognito User Pool for user authentication
    UserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName: !Sub ${Prefix}-UserPool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: true
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
          EmailMessageByLink: 'Click the Verify Email link to verify your email address to Sign Up for Healtcare Appointment Booking. {##Verify Email##}'

    # Client for accessing the Cognito User Pool
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        AccessTokenValidity: 1
        SupportedIdentityProviders:
          - COGNITO
        TokenValidityUnits:
          AccessToken: days

    # Domain setup for the Cognito User Pool
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: !Ref Prefix
        UserPoolId: !Ref UserPool


    #VPC and Subnet
    MyVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref VPCName


    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select [ 0, !GetAZs "" ]

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select [ 1, !GetAZs "" ]

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.0.3.0/24
        AvailabilityZone: !Select [ 0, !GetAZs "" ]

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.0.4.0/24
        AvailabilityZone: !Select [ 1, !GetAZs "" ]

    InternetGateway:
      Type: AWS::EC2::InternetGateway

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref MyVPC
        InternetGatewayId: !Ref InternetGateway

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVPC

    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVPC

    PrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NATGateway

    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable

    ElasticIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

    NATGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt ElasticIP.AllocationId
        SubnetId: !Ref PublicSubnet1


  ## S3 Bucket
  # S3 Bucket for storing files
    Bucket:
      Type: AWS::S3::Bucket
#      DependsOn:
#        - BucketPermissionAccess
      Properties:
        BucketName: !Ref BucketName
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
   
    PublicAccessBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource:
                Fn::Sub: 'arn:aws:s3:::${Bucket}/*'

    ## DynamoDB Tables
    PatientSchema:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: patientSchema
        AttributeDefinitions:
          - AttributeName: patientId
            AttributeType: S
        KeySchema:
          - AttributeName: patientId
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: "1"
            WriteCapacityUnits: "1"

    DoctorSchema:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: doctorSchema
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: "1"
            WriteCapacityUnits: "1"

    AppointmentSchema:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: appointmentSchema
        AttributeDefinitions:
          - AttributeName: patientId
            AttributeType: S
        KeySchema:
          - AttributeName: patientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

    FeedbackSchema:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: feedbackSchema
        AttributeDefinitions:
          - AttributeName: feedbackId
            AttributeType: S
        KeySchema:
          - AttributeName: feedbackId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

     ## SNS Topic for Blog Notifications
    AppointmentNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: AppointmentNotificationTopic


  ##Permissions

  ##EC2 instance setup and configuration:
   # Security Group allowing HTTPS access through port 4200
    EC2SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow SSH and HTTP access to EC2
        VpcId: !Ref MyVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0

    # EC2 instance definition
    FrontendEC2Instance:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: !Ref InstanceType
        KeyName: !Ref 'KeyName'
        ImageId: ami-012967cc5a8c9f891
        SubnetId: !Ref PublicSubnet1
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64:
            !Sub |

        Tags:
        - Key: Name
          Value: frontend-healthcare

    BackendEC2Instance1:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: !Ref InstanceType
        KeyName: !Ref 'KeyName'
        ImageId: ami-012967cc5a8c9f891
        SubnetId: !Ref PrivateSubnet1
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64:
            !Sub |

        Tags:
          - Key: Name
            Value: backend-healthcare1

    BackendEC2Instance2:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: !Ref InstanceType
        KeyName: !Ref 'KeyName'
        ImageId: ami-012967cc5a8c9f891
        SubnetId: !Ref PrivateSubnet1
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64:
            !Sub |

        Tags:
          - Key: Name
            Value: backend-healthcare2

    BackendEC2Instance3:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: !Ref InstanceType
        KeyName: !Ref 'KeyName'
        ImageId: ami-012967cc5a8c9f891
        SubnetId: !Ref PrivateSubnet1
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64:
            !Sub |

        Tags:
          - Key: Name
            Value: backend-healthcare3

    ##Load Balancer Setup for backend
  # Security Group for the Load Balancer
    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow HTTP access for Load Balancer
        VpcId: !Ref MyVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

  # Application Load Balancer
    ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: BackendALB
        Scheme: internet-facing
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Type: application
        Tags:
          - Key: Name
            Value: BackendLoadBalancer

  # Target Group for Backend Instances
    BackendTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: BackendTargetGroup
        Protocol: HTTP
        Port: 8080
        VpcId: !Ref MyVPC
        TargetType: instance
        HealthCheckProtocol: HTTP
        HealthCheckPort: 8080
        HealthCheckPath: /
        Matcher:
          HttpCode: 200
        Targets:
          - Id: !Ref BackendEC2Instance1
          - Id: !Ref BackendEC2Instance2
          - Id: !Ref BackendEC2Instance3

  # Listener for the Application Load Balancer
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref BackendTargetGroup
        LoadBalancerArn: !Ref ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
Outputs:
  BlogNotificationTopicArn:
    Description: The ARN of the SNS Topic for healthcare notifications
    Value: !Ref AppointmentNotificationTopic

  ApplicationURL:
    Description: The URL of the deployed application
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - FrontendEC2Instance
          - PublicDnsName
        - ':4200'